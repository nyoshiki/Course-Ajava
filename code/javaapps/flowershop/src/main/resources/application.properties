# -------------------------------------------------------------------------
# 環境変数が指定されているプロパティは、開発環境では環境変数が指定されていないことを前提に
# 記載されているデフォルト値を利用して動作する。
# 検証環境以降はDocker Composeの環境ファイル等で環境変数として設定された値があれば
# 切り替えて実行することを可能としている。
# -------------------------------------------------------------------------
# ---------------------------------
# コンテキストパス
# URIのルートを指定する
# Nginxのリバースプロキシ先に指定
# ---------------------------------
# アプリケーション・コンテキストルート（ControllerやThymeleafのURIのプレフィックスとなる）
server.servlet.context-path=/

# ---------------------------------
# データベース・JPA設定
# ---------------------------------
# MySQL/MariaDB共通
spring.datasource.username=user
spring.datasource.password=password
spring.jpa.database=MYSQL
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace
logging.level.org.hibernate.type.EnumType=trace

# MySQL用
spring.datasource.url=jdbc:mysql://localhost:59306/flower_db
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# MariaDB用 for raspberry pi arm64 ubuntu (build.gradleのmariadbのimplementのコメントアウトを同時に解除)
#spring.datasource.url=jdbc:mariadb://localhost:59306/flower_db
##spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
##spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect

# ---------------------------------
# Thymeleaf設定
# ---------------------------------
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false

# 開発環境ではデフォルトのキャッシュを無効
# 本番環境ではresourceフォルダ配下のHTML、JS、CSSなどのキャッシュを有効に
spring.web.resources.chain.cache=false
#spring.resources.cache-period=604800
#spring.resources.chain.gzipped=true Gzipリソースを有効にする場合

# ---------------------------------
## for static contents path                                                                                                                                              
# デフォルトでSpring Bootはroot directory/src/main/resources
# の配下の下記を静的コンテンツパスとして解釈するため追加設定不要
# 下記フォルダをルートコンテキストとして解釈できる
# static
# public
# resources
# META-INF
# ---------------------------------
#spring.resources.static-locations=classpath:/static/

# ---------------------------------
# アプリケーションサーバアクセスポート
# ---------------------------------
server.port=8100

# ---------------------------------
# ログ出力
# カスタマイズは下記公式サイト参照
# https://spring.pleiades.io/spring-boot/docs/2.1.11.RELEASE/reference/html/boot-features-logging.html
# ---------------------------------
# ログ出力パスの変更（logging.file.nameと同時利用不可のためプロパティでの変更はパスのみ）
# 指定ディレクトリの下にspring.logができる。logging.file.nameはjarと同じディレクトリとなる。
# code/javaapps/flowershop/logディレクトリに出力される
# 注意：ダブルクォーテーション、シングルクォーテーションは不要
logging.file.path=log
logging.logback.rollingpolicy.max-history=5
#logging.file.max-size=

# LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEBでも設定可能
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
# LOGGING_LEVEL_ORG_HIBERNATEでも設定可能
logging.level.org.hibernate=info
logging.level.org.springframework.security=DEBUG
spring.mvc.log-request-details=true

# ---------------------------------
# メッセージ出力
# UIの入力チェックはViewModelクラスを定義しBean Validationを利用する
# Bean Validationの結果のデフォルトエラーメッセージはチェックするタイプごとに
# src/main/resources/ValidationMessages.propertiesに設定する。
# デフォルトはプロパティ名が出力されるため項目名の変更は
# src/main/resources/message.propertiesに設定する。
# ---------------------------------
# メッセージプロパティのベースファイル名
spring.messages.basename=messages
spring.messages.encoding=UTF-8

# ---------------------------------
# セキュリティ認証リソース設定
# OAuth利用時に設定
# ---------------------------------
# security.oauth2.resource.userInfoUri: http://xxx.xxx.xxx.xxx:nnnn/auth/user

# ---------------------------------
# CORSセキュリティ設定
# jp.flowershop.conrtoller.security.filter.CorsAllowedConfigurationにて拡張
# ---------------------------------
# CORSクロスオリジンリクエストシェアリングでアクセスを許可するオリジン
# 環境変数CORS_ALLOWED_ORIGINで設定可
flowershop.security.api.allowedorigin=${CORS_ALLOWED_ORIGIN:http://192.168.56.103:3000}

# ---------------------------------
# サーバリソース設定
# JVM,Spring内蔵Tomcat設定
# https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/htmlsingle/#common-application-properties
# ---------------------------------
# Tomcatのコネクション数は5最小編成（デフォルト最小10最大8192）
server.tomcat.max-connections=5
# Tomcatのワーカースレッド数を5本にする最小編成（デフォルト最小10最大200）
server.tomcat.threads.max=5
server.tomcat.threads.min-spare=5
